// Package messages provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package messages

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for FromPropertyType.
const (
	FromPropertyTypeMessenger FromPropertyType = "messenger"

	FromPropertyTypeMms FromPropertyType = "mms"

	FromPropertyTypeSms FromPropertyType = "sms"

	FromPropertyTypeViberServiceMsg FromPropertyType = "viber_service_msg"

	FromPropertyTypeWhatsapp FromPropertyType = "whatsapp"
)

// Defines values for MessageStatusStatus.
const (
	MessageStatusStatusDelivered MessageStatusStatus = "delivered"

	MessageStatusStatusRead MessageStatusStatus = "read"

	MessageStatusStatusRejected MessageStatusStatus = "rejected"

	MessageStatusStatusSubmitted MessageStatusStatus = "submitted"

	MessageStatusStatusUndeliverable MessageStatusStatus = "undeliverable"
)

// Defines values for MessageStatusUsageCurrency.
const (
	MessageStatusUsageCurrencyEUR MessageStatusUsageCurrency = "EUR"
)

// Defines values for SmsCommonFromType.
const (
	SmsCommonFromTypeSms SmsCommonFromType = "sms"
)

// Defines values for SmsCommonMessageContentType.
const (
	SmsCommonMessageContentTypeText SmsCommonMessageContentType = "text"
)

// Defines values for SmsCommonToType.
const (
	SmsCommonToTypeSms SmsCommonToType = "sms"
)

// Defines values for ToPropertyType.
const (
	ToPropertyTypeMessenger ToPropertyType = "messenger"

	ToPropertyTypeMms ToPropertyType = "mms"

	ToPropertyTypeSms ToPropertyType = "sms"

	ToPropertyTypeViberServiceMsg ToPropertyType = "viber_service_msg"

	ToPropertyTypeWhatsapp ToPropertyType = "whatsapp"
)

// Defines values for AudioMessageFacebookContentType.
const (
	AudioMessageFacebookContentTypeAudio AudioMessageFacebookContentType = "audio"
)

// Defines values for AudioMessageWhatsAppMessageContentType.
const (
	AudioMessageWhatsAppMessageContentTypeAudio AudioMessageWhatsAppMessageContentType = "audio"
)

// Defines values for ChannelOptionsFacebookCommonFromType.
const (
	ChannelOptionsFacebookCommonFromTypeMessenger ChannelOptionsFacebookCommonFromType = "messenger"
)

// Defines values for ChannelOptionsFacebookCommonToType.
const (
	ChannelOptionsFacebookCommonToTypeMessenger ChannelOptionsFacebookCommonToType = "messenger"
)

// Defines values for ChannelOptionsViberCommonFromType.
const (
	ChannelOptionsViberCommonFromTypeViberServiceMsg ChannelOptionsViberCommonFromType = "viber_service_msg"
)

// Defines values for ChannelOptionsViberCommonToType.
const (
	ChannelOptionsViberCommonToTypeViberServiceMsg ChannelOptionsViberCommonToType = "viber_service_msg"
)

// Defines values for ChannelOptionsWhatsappCommonFromType.
const (
	ChannelOptionsWhatsappCommonFromTypeWhatsapp ChannelOptionsWhatsappCommonFromType = "whatsapp"
)

// Defines values for ChannelOptionsWhatsappCommonToType.
const (
	ChannelOptionsWhatsappCommonToTypeWhatsapp ChannelOptionsWhatsappCommonToType = "whatsapp"
)

// Defines values for FileMessageFacebookContentType.
const (
	FileMessageFacebookContentTypeFile FileMessageFacebookContentType = "file"
)

// Defines values for FileMessageWhatsAppMessageContentType.
const (
	FileMessageWhatsAppMessageContentTypeFile FileMessageWhatsAppMessageContentType = "file"
)

// Defines values for ImageMessageFacebookContentType.
const (
	ImageMessageFacebookContentTypeImage ImageMessageFacebookContentType = "image"
)

// Defines values for ImageMessageMmsMessageContentType.
const (
	ImageMessageMmsMessageContentTypeImage ImageMessageMmsMessageContentType = "image"
)

// Defines values for ImageMessageViberContentType.
const (
	ImageMessageViberContentTypeImage ImageMessageViberContentType = "image"
)

// Defines values for ImageMessageWhatsAppMessageContentType.
const (
	ImageMessageWhatsAppMessageContentTypeImage ImageMessageWhatsAppMessageContentType = "image"
)

// Defines values for MessengerCategory.
const (
	MessengerCategoryMessageTag MessengerCategory = "message_tag"

	MessengerCategoryResponse MessengerCategory = "response"

	MessengerCategoryUpdate MessengerCategory = "update"
)

// Defines values for MmsMessageCommonFromType.
const (
	MmsMessageCommonFromTypeMms MmsMessageCommonFromType = "mms"
)

// Defines values for MmsMessageCommonToType.
const (
	MmsMessageCommonToTypeMms MmsMessageCommonToType = "mms"
)

// Defines values for TemplateMessageViberContentType.
const (
	TemplateMessageViberContentTypeTemplate TemplateMessageViberContentType = "template"
)

// Defines values for TemplateMessageWhatsAppMessageWhatsappPolicy.
const (
	TemplateMessageWhatsAppMessageWhatsappPolicyDeterministic TemplateMessageWhatsAppMessageWhatsappPolicy = "deterministic"
)

// Defines values for TemplateMessageWhatsAppContentType.
const (
	TemplateMessageWhatsAppContentTypeTemplate TemplateMessageWhatsAppContentType = "template"
)

// Defines values for TextMessageFacebookContentType.
const (
	TextMessageFacebookContentTypeText TextMessageFacebookContentType = "text"
)

// Defines values for TextMessageViberContentType.
const (
	TextMessageViberContentTypeText TextMessageViberContentType = "text"
)

// Defines values for TextMessageWhatsAppMessageContentType.
const (
	TextMessageWhatsAppMessageContentTypeText TextMessageWhatsAppMessageContentType = "text"
)

// Defines values for VcardMessageMmsMessageContentType.
const (
	VcardMessageMmsMessageContentTypeVcard VcardMessageMmsMessageContentType = "vcard"
)

// Defines values for ViberServiceMsgCategory.
const (
	ViberServiceMsgCategoryPromotion ViberServiceMsgCategory = "promotion"

	ViberServiceMsgCategoryTransaction ViberServiceMsgCategory = "transaction"
)

// Defines values for VideoMessageFacebookContentType.
const (
	VideoMessageFacebookContentTypeVideo VideoMessageFacebookContentType = "video"
)

// Defines values for VideoMessageWhatsAppMessageContentType.
const (
	VideoMessageWhatsAppMessageContentTypeVideo VideoMessageWhatsAppMessageContentType = "video"
)

// The error format is standardized to the 4xx/5xx range with a code and a human readable explanation.
type Error struct {
	Detail   string `json:"detail"`
	Instance string `json:"instance"`
	Title    string `json:"title"`
	Type     string `json:"type"`
}

// FromProperty defines model for FromProperty.
type FromProperty struct {
	// Your ID for the platform that you are sending from.
	//
	// **Messenger**: This value should be the `to.id` value you received in the inbound messenger event.
	//
	// **Viber**: This is your Service Message ID given to you by your Vonage Account Manager. To find out more please visit [vonage.com](https://www.vonage.com/communications-apis/messages/).
	Id *string `json:"id,omitempty"`

	// **SMS**: The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
	//
	// **WhatsApp**: This is your WhatsApp Business Number given to you by your Vonage Account Manager. To find out more please visit [vonage.com](https://www.vonage.com/communications-apis/messages/).
	//
	// **MMS**: US shortcode
	Number *string `json:"number,omitempty"`

	// The type of message that you want to send.
	Type FromPropertyType `json:"type"`
}

// The type of message that you want to send.
type FromPropertyType string

// MessageStatus defines model for MessageStatus.
type MessageStatus struct {
	// The client's reference.
	ClientRef *string `json:"client_ref,omitempty"`
	Error     *struct {
		// The error code. See [our errors list](/api-errors/messages-olympus) for a list of possible errors
		Code *int `json:"code,omitempty"`

		// Text describing the error. See [our errors list](/api-errors/messages-olympus) for a list of possible errors
		Reason *string `json:"reason,omitempty"`
	} `json:"error,omitempty"`
	From FromProperty `json:"from"`

	// The UUID of the message.
	MessageUuid string `json:"message_uuid"`

	// The status of the message. The `read` message status is available for `messenger`, `whatsapp` and `viber`.
	Status MessageStatusStatus `json:"status"`

	// The datetime of when the event occurred.
	Timestamp TimestampProperty `json:"timestamp"`
	To        ToProperty        `json:"to"`
	Usage     *struct {
		// The charge currency in ISO 4217 format.
		Currency *MessageStatusUsageCurrency `json:"currency,omitempty"`

		// The charge amount as a stringified number.
		Price *string `json:"price,omitempty"`
	} `json:"usage,omitempty"`
}

// The status of the message. The `read` message status is available for `messenger`, `whatsapp` and `viber`.
type MessageStatusStatus string

// The charge currency in ISO 4217 format.
type MessageStatusUsageCurrency string

// Response defines model for Response.
type Response struct {
	// The UUID of the message.
	MessageUuid string `json:"message_uuid"`
}

// Sms defines model for Sms.
type Sms struct {
	// Embedded fields due to inline allOf schema
	// client reference up to 40 characters, the reference will be present in every message status
	ClientRef *ClientRef `json:"client_ref,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/SmsCommon)
	SmsCommon `yaml:",inline"`
}

// SmsCommon defines model for SmsCommon.
type SmsCommon struct {
	From struct {
		// The Vonage Virtual number the message is originating from in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		Number string `json:"number"`

		// The channel the message is coming from
		Type SmsCommonFromType `json:"type"`
	} `json:"from"`
	Message struct {
		Content struct {
			// Limited to 1000 characters. The Messages API automatically detects unicode characters when sending SMS and sends the message as a unicode SMS. For more information on how concatenation and encoding please visit: developer.nexmo.com/messaging/sms/guides/concatenation-and-encoding.
			Text string `json:"text"`

			// The content type of the message
			Type SmsCommonMessageContentType `json:"type"`
		} `json:"content"`
	} `json:"message"`
	To struct {
		// The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		Number ToNumber `json:"number"`

		// The channel the message is going to.
		Type SmsCommonToType `json:"type"`
	} `json:"to"`
}

// The channel the message is coming from
type SmsCommonFromType string

// The content type of the message
type SmsCommonMessageContentType string

// The channel the message is going to.
type SmsCommonToType string

// The datetime of when the event occurred.
type TimestampProperty string

// ToProperty defines model for ToProperty.
type ToProperty struct {
	// **Messenger**: The ID of the message recipient. This value should be the `from.id` value you received in the inbound messenger event.
	Id *string `json:"id,omitempty"`

	// **SMS**, **Viber**, **WhatsApp** or **MMS**:
	// The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
	Number *string `json:"number,omitempty"`

	// The type of message that you want to send.
	Type ToPropertyType `json:"type"`
}

// The type of message that you want to send.
type ToPropertyType string

// AudioMessageFacebook defines model for audioMessageFacebook.
type AudioMessageFacebook struct {
	Message struct {
		Content   AudioMessageFacebookContent `json:"content"`
		Messenger *Messenger                  `json:"messenger,omitempty"`
	} `json:"message"`
}

// AudioMessageFacebookContent defines model for audioMessageFacebookContent.
type AudioMessageFacebookContent struct {
	// The audio content being sent to the recipient.
	Audio struct {
		// The URL of the audio attachment. Supports .mp3.
		Url string `json:"url"`
	} `json:"audio"`

	// The type of message being sent.
	Type AudioMessageFacebookContentType `json:"type"`
}

// The type of message being sent.
type AudioMessageFacebookContentType string

// AudioMessageWhatsApp defines model for audioMessageWhatsApp.
type AudioMessageWhatsApp struct {
	Message struct {
		Content struct {
			// The audio content object for the request
			Audio struct {
				// The publicly accessible URL of the audio attachment. The audio file is available for 48 hours after it is created.
				// Supports .aac, .m4a, .amr, .mp3 and .opus
				Url string `json:"url"`
			} `json:"audio"`

			// the type of message that you are sending
			Type AudioMessageWhatsAppMessageContentType `json:"type"`
		} `json:"content"`
	} `json:"message"`
}

// the type of message that you are sending
type AudioMessageWhatsAppMessageContentType string

// ChannelOptionsFacebook defines model for channelOptionsFacebook.
type ChannelOptionsFacebook struct {
	// Embedded struct due to allOf(#/components/schemas/channelOptionsFacebookCommon)
	ChannelOptionsFacebookCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// client reference up to 40 characters, the reference will be present in every message status
	ClientRef *ClientRef `json:"client_ref,omitempty"`
}

// ChannelOptionsFacebookCommon defines model for channelOptionsFacebookCommon.
type ChannelOptionsFacebookCommon struct {
	From struct {
		// This value should be the `to.id` value you received in the inbound messenger event. Can also be found using your [account dashboard](https://dashboard.nexmo.com/applications/) when trying to link external accounts to your applications.
		Id string `json:"id"`

		// The channel that you are sending from
		Type ChannelOptionsFacebookCommonFromType `json:"type"`
	} `json:"from"`
	To struct {
		// The ID of the Message recipient. This value should be the `from.id` value you receive on an inbound message from messenger
		Id string `json:"id"`

		// The channel that you are sending to
		Type ChannelOptionsFacebookCommonToType `json:"type"`
	} `json:"to"`
}

// The channel that you are sending from
type ChannelOptionsFacebookCommonFromType string

// The channel that you are sending to
type ChannelOptionsFacebookCommonToType string

// ChannelOptionsViber defines model for channelOptionsViber.
type ChannelOptionsViber struct {
	// Embedded struct due to allOf(#/components/schemas/channelOptionsViberCommon)
	ChannelOptionsViberCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// client reference up to 40 characters, the reference will be present in every message status
	ClientRef *ClientRef `json:"client_ref,omitempty"`
}

// ChannelOptionsViberCommon defines model for channelOptionsViberCommon.
type ChannelOptionsViberCommon struct {
	From struct {
		// This is your Service Message ID given to you by your Vonage Account Manager. To find out more please visit [vonage.com](https://www.vonage.com/communications-apis/messages/).
		Id string `json:"id"`

		// The channel your message will be coming from.
		Type ChannelOptionsViberCommonFromType `json:"type"`
	} `json:"from"`
	To struct {
		// The Viber number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		Number string `json:"number"`

		// The channel you are sending to
		Type ChannelOptionsViberCommonToType `json:"type"`
	} `json:"to"`
}

// The channel your message will be coming from.
type ChannelOptionsViberCommonFromType string

// The channel you are sending to
type ChannelOptionsViberCommonToType string

// ChannelOptionsWhatsapp defines model for channelOptionsWhatsapp.
type ChannelOptionsWhatsapp struct {
	// Embedded struct due to allOf(#/components/schemas/channelOptionsWhatsappCommon)
	ChannelOptionsWhatsappCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// client reference up to 40 characters, the reference will be present in every message status
	ClientRef *ClientRef `json:"client_ref,omitempty"`
}

// ChannelOptionsWhatsappCommon defines model for channelOptionsWhatsappCommon.
type ChannelOptionsWhatsappCommon struct {
	From struct {
		// WhatsApp Number the message is to be sent from.
		Number string `json:"number"`

		// Channel the message is going to be sent from.
		Type ChannelOptionsWhatsappCommonFromType `json:"type"`
	} `json:"from"`
	To struct {
		// The WhatsApp number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		Number string `json:"number"`

		// Channel the message is going to
		Type ChannelOptionsWhatsappCommonToType `json:"type"`
	} `json:"to"`
}

// Channel the message is going to be sent from.
type ChannelOptionsWhatsappCommonFromType string

// Channel the message is going to
type ChannelOptionsWhatsappCommonToType string

// client reference up to 40 characters, the reference will be present in every message status
type ClientRef string

// FileMessageFacebook defines model for fileMessageFacebook.
type FileMessageFacebook struct {
	Message struct {
		Content   FileMessageFacebookContent `json:"content"`
		Messenger *Messenger                 `json:"messenger,omitempty"`
	} `json:"message"`
}

// FileMessageFacebookContent defines model for fileMessageFacebookContent.
type FileMessageFacebookContent struct {
	// The file content being sent to the recipient.
	File struct {
		// The URL of the file attachment. Supports .zip, .csv, and .pdf
		Url string `json:"url"`
	} `json:"file"`

	// The type of message being sent.
	Type FileMessageFacebookContentType `json:"type"`
}

// The type of message being sent.
type FileMessageFacebookContentType string

// FileMessageWhatsApp defines model for fileMessageWhatsApp.
type FileMessageWhatsApp struct {
	Message struct {
		Content struct {
			// The file content object to be sent.
			File struct {
				// Additional text to accompany the file.
				Caption *interface{} `json:"caption,omitempty"`

				// The publicly accessible URL of the file to be sent. Supports .pdf, .doc(x), .ppt(x), and .xls(x)
				Url string `json:"url"`
			} `json:"file"`

			// The type of message that you are sending.
			Type FileMessageWhatsAppMessageContentType `json:"type"`
		} `json:"content"`
	} `json:"message"`
}

// The type of message that you are sending.
type FileMessageWhatsAppMessageContentType string

// ImageMessageFacebook defines model for imageMessageFacebook.
type ImageMessageFacebook struct {
	Message struct {
		Content   ImageMessageFacebookContent `json:"content"`
		Messenger *Messenger                  `json:"messenger,omitempty"`
	} `json:"message"`
}

// ImageMessageFacebookContent defines model for imageMessageFacebookContent.
type ImageMessageFacebookContent struct {
	// The image content being sent to the recipient.
	Image struct {
		// The URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, .png, and .gif
		Url string `json:"url"`
	} `json:"image"`

	// The type of message being sent.
	Type ImageMessageFacebookContentType `json:"type"`
}

// The type of message being sent.
type ImageMessageFacebookContentType string

// ImageMessageMms defines model for imageMessageMms.
type ImageMessageMms struct {
	Message struct {
		Content struct {
			Image struct {
				// Additional text to accompany the image.
				Caption *string `json:"caption,omitempty"`

				// The URL of the image attachment. The image file is available for 48 hours after it is created. Supported file types are .jpg, .jpeg, .png, and .gif
				Url string `json:"url"`
			} `json:"image"`

			// The type of message to be sent
			Type ImageMessageMmsMessageContentType `json:"type"`
		} `json:"content"`
	} `json:"message"`
}

// The type of message to be sent
type ImageMessageMmsMessageContentType string

// ImageMessageViber defines model for imageMessageViber.
type ImageMessageViber struct {
	Message struct {
		Content         ImageMessageViberContent `json:"content"`
		ViberServiceMsg *ViberServiceMsg         `json:"viber_service_msg,omitempty"`
	} `json:"message"`
}

// ImageMessageViberContent defines model for imageMessageViberContent.
type ImageMessageViberContent struct {
	// Image content to be sent
	Image struct {
		// Publicly accessible URL of the image to be attached. The image file is available for 48 hours after it's created. Supports .jpg, .jpeg, and .png.
		Url string `json:"url"`
	} `json:"image"`

	// The type of message being sent
	Type ImageMessageViberContentType `json:"type"`
}

// The type of message being sent
type ImageMessageViberContentType string

// ImageMessageWhatsApp defines model for imageMessageWhatsApp.
type ImageMessageWhatsApp struct {
	Message struct {
		Content struct {
			// image content object
			Image struct {
				// Additional text to accompany the image.
				Caption *string `json:"caption,omitempty"`

				// The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png
				Url string `json:"url"`
			} `json:"image"`

			// The type of message that you are sending
			Type ImageMessageWhatsAppMessageContentType `json:"type"`
		} `json:"content"`
	} `json:"message"`
}

// The type of message that you are sending
type ImageMessageWhatsAppMessageContentType string

// Message defines model for message.
type Message interface{}

// Messenger defines model for messenger.
type Messenger struct {
	// The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
	Category *MessengerCategory `json:"category,omitempty"`

	// A full list of the possible tags is available on [developers.facebook.com](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)
	Tag *string `json:"tag,omitempty"`
}

// The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
type MessengerCategory string

// MmsMessage defines model for mmsMessage.
type MmsMessage struct {
	// Embedded struct due to allOf(#/components/schemas/mmsMessageCommon)
	MmsMessageCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// client reference up to 40 characters, the reference will be present in every message status
	ClientRef *ClientRef `json:"client_ref,omitempty"`
}

// MmsMessageCommon defines model for mmsMessageCommon.
type MmsMessageCommon struct {
	From struct {
		// A US shortcode
		Number string `json:"number"`

		// The channel the message is coming from
		Type MmsMessageCommonFromType `json:"type"`
	} `json:"from"`
	To struct {
		// The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		Number string `json:"number"`

		// The channel the message is going to
		Type MmsMessageCommonToType `json:"type"`
	} `json:"to"`
}

// The channel the message is coming from
type MmsMessageCommonFromType string

// The channel the message is going to
type MmsMessageCommonToType string

// TemplateMessageViberContent defines model for templateMessageViberContent.
type TemplateMessageViberContent struct {
	// The template to be sent.
	Template struct {
		// The name of the template to be sent
		Name string `json:"name"`

		// The parameters are an array. The first value being {{1}} in the template.
		Parameters *TemplateParameters `json:"parameters,omitempty"`
	} `json:"template"`

	// The type of message you are sending
	Type TemplateMessageViberContentType `json:"type"`
}

// The type of message you are sending
type TemplateMessageViberContentType string

// TemplateMessageViberOutbound defines model for templateMessageViber_outbound.
type TemplateMessageViberOutbound struct {
	Message struct {
		Content         TemplateMessageViberContent `json:"content"`
		ViberServiceMsg *ViberServiceMsg            `json:"viber_service_msg,omitempty"`
	} `json:"message"`
}

// TemplateMessageWhatsApp defines model for templateMessageWhatsApp.
type TemplateMessageWhatsApp struct {
	Message struct {
		Content  TemplateMessageWhatsAppContent `json:"content"`
		Whatsapp struct {
			// The [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) language of the template. Vonage will translate the BCP 47 format to the [WhatsApp equivalent](https://developers.facebook.com/docs/whatsapp/message-templates/creation#translations). For examples `en-GB` will be auto-translate to en_GB.
			Locale string `json:"locale"`

			// Policy for resolving what language template to use. Please note that WhatsApp deprecated the `fallback` policy in January of 2020, all requests carrying a `fallback` policy will be rejected with a 400 error
			Policy *TemplateMessageWhatsAppMessageWhatsappPolicy `json:"policy,omitempty"`
		} `json:"whatsapp"`
	} `json:"message"`
}

// Policy for resolving what language template to use. Please note that WhatsApp deprecated the `fallback` policy in January of 2020, all requests carrying a `fallback` policy will be rejected with a 400 error
type TemplateMessageWhatsAppMessageWhatsappPolicy string

// TemplateMessageWhatsAppContent defines model for templateMessageWhatsAppContent.
type TemplateMessageWhatsAppContent struct {
	// The Template request object to be sent to WhatsApp.
	Template struct {
		// The name of the template. For WhatsApp use your WhatsApp namespace (available via Facebook Business Manager), followed by a colon `:` and the name of the template to use.
		Name string `json:"name"`

		// The parameters are an array. The first value being {{1}} in the template.
		Parameters *TemplateParameters `json:"parameters,omitempty"`
	} `json:"template"`

	// the type of message that you are sending
	Type TemplateMessageWhatsAppContentType `json:"type"`
}

// the type of message that you are sending
type TemplateMessageWhatsAppContentType string

// The parameters are an array. The first value being {{1}} in the template.
type TemplateParameters []string

// TextMessageFacebook defines model for textMessageFacebook.
type TextMessageFacebook struct {
	Message struct {
		Content   TextMessageFacebookContent `json:"content"`
		Messenger *Messenger                 `json:"messenger,omitempty"`
	} `json:"message"`
}

// TextMessageFacebookContent defines model for textMessageFacebookContent.
type TextMessageFacebookContent struct {
	// The text to be sent to the recipient's Facebook Messenger account.
	Text string `json:"text"`

	// The type of message being sent.
	Type TextMessageFacebookContentType `json:"type"`
}

// The type of message being sent.
type TextMessageFacebookContentType string

// TextMessageViber defines model for textMessageViber.
type TextMessageViber struct {
	Message struct {
		Content         TextMessageViberContent `json:"content"`
		ViberServiceMsg *ViberServiceMsg        `json:"viber_service_msg,omitempty"`
	} `json:"message"`
}

// TextMessageViberContent defines model for textMessageViberContent.
type TextMessageViberContent struct {
	// Text to be sent to the user, limited to 1000 characters, including unicode.
	Text string `json:"text"`

	// The type of message being sent
	Type TextMessageViberContentType `json:"type"`
}

// The type of message being sent
type TextMessageViberContentType string

// TextMessageWhatsApp defines model for textMessageWhatsApp.
type TextMessageWhatsApp struct {
	Message struct {
		// Content of the whatsapp message
		Content struct {
			// Text Message limited to 4096 characters, including unicode.
			Text string `json:"text"`

			// The type of message that you are sending
			Type TextMessageWhatsAppMessageContentType `json:"type"`
		} `json:"content"`
	} `json:"message"`
}

// The type of message that you are sending
type TextMessageWhatsAppMessageContentType string

// The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
type ToNumber string

// VcardMessageMms defines model for vcardMessageMms.
type VcardMessageMms struct {
	Message struct {
		Content struct {
			// The type of message to be sent
			Type  VcardMessageMmsMessageContentType `json:"type"`
			Vcard struct {
				// The URL of the vcard attachment. The vcard file is available for 48 hours after it is created.
				Url string `json:"url"`
			} `json:"vcard"`
		} `json:"content"`
	} `json:"message"`
}

// The type of message to be sent
type VcardMessageMmsMessageContentType string

// ViberServiceMsg defines model for viber_service_msg.
type ViberServiceMsg struct {
	// The use of different category tags enables the business to send messages for different use cases. For Viber Service Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Service Messages.
	Category *ViberServiceMsgCategory `json:"category,omitempty"`

	// Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
	Ttl *int `json:"ttl,omitempty"`

	// Viber-specific type definition. To use "template", please contact Vonage Account Manager to setup your templates. To find out more please visit [vonage.com/products/messages](https://www.vonage.com/communications-apis/messages/).
	Type *string `json:"type,omitempty"`
}

// The use of different category tags enables the business to send messages for different use cases. For Viber Service Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Service Messages.
type ViberServiceMsgCategory string

// VideoMessageFacebook defines model for videoMessageFacebook.
type VideoMessageFacebook struct {
	Message struct {
		Content   VideoMessageFacebookContent `json:"content"`
		Messenger *Messenger                  `json:"messenger,omitempty"`
	} `json:"message"`
}

// VideoMessageFacebookContent defines model for videoMessageFacebookContent.
type VideoMessageFacebookContent struct {
	// The type of message being sent.
	Type VideoMessageFacebookContentType `json:"type"`

	// The video content being sent to the recipient.
	Video struct {
		// The URL of the video attachment. Supports .mp4.
		Url string `json:"url"`
	} `json:"video"`
}

// The type of message being sent.
type VideoMessageFacebookContentType string

// VideoMessageWhatsApp defines model for videoMessageWhatsApp.
type VideoMessageWhatsApp struct {
	Message struct {
		Content struct {
			// The type of message that you are sending
			Type VideoMessageWhatsAppMessageContentType `json:"type"`

			// the video content object for the WhatsApp request
			Video struct {
				// Publicly accessible URL of the video attachment.
				// Supports file types .mp4 and .3gpp
				// > Note: Only supports video codec H.264 and audio codec AAC
				Url string `json:"url"`
			} `json:"video"`
		} `json:"content"`
	} `json:"message"`
}

// The type of message that you are sending
type VideoMessageWhatsAppMessageContentType string

// NewMessageJSONBody defines parameters for NewMessage.
type NewMessageJSONBody Message

// NewMessageJSONRequestBody defines body for NewMessage for application/json ContentType.
type NewMessageJSONRequestBody NewMessageJSONBody
